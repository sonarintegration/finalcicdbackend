name: CI for Go
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  build:
    name: CI for Go
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      security-events: write
      checks: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}

      # Uncomment and configure as needed
      # - name: Run Snyk to check for vulnerabilities
      #   uses: snyk/actions/golang@master
      #   continue-on-error: true
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #     command: code test
      #     args: --sarif-file-output=snyk.sarif

      # - name: Run Trivy vulnerability scanner in repo mode
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #      scan-type: 'fs'
      #      ignore-unfixed: true
      #      format: 'sarif'
      #      output: 'trivy-results.sarif'
      #      severity: 'CRITICAL'

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.22.1'

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Compile
        run: go build -v .

      - name: Install go-junit-report
        run: |
          go install github.com/jstemmer/go-junit-report@latest
          echo "${GOPATH}/bin" >> $GITHUB_PATH

      - name: Run Tests
        run: |
          mkdir -p test-reports
          go test -v ./... 2>&1 | tee test-reports/tests.txt

      - name: Generate JUnit report
        run: cat test-reports/tests.txt | go-junit-report > test-reports/junit-report.xml

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: 'test-reports/junit-report.xml'

      - name: Code Coverage
        run: |
          go test -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload Code Coverage Artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage-out
          path: coverage.out

      - name: Upload Code Coverage HTML Artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage-html
          path: coverage.html

      # Uncomment and configure as needed
      # - name: Install JFrog CLI
      #   run: |
      #    curl -fL https://getcli.jfrog.io | sh
      #    chmod +x jfrog
      #    mv jfrog /usr/local/bin/
      # - name: Configure JFrog CLI
      #   env:
      #    ARTIFACTORY_URL: ${{ secrets.ARTIFACTORY_URL }}
      #    ARTIFACTORY_USER: ${{ secrets.ARTIFACTORY_USER }}
      #    ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
      #   run: |
      #    jfrog config add rt-server --artifactory-url $ARTIFACTORY_URL --user $ARTIFACTORY_USER --password $ARTIFACTORY_PASSWORD --interactive=false
      # - name: Push Artifacts to JFrog
      #   run: |
      #     jfrog rt u todo_app.exe gitjfrog-libs-snapshot-local/ --url=https://shubhamtodo.jfrog.io/artifactory/gotodo-go-local/ --access-token=eyJ2ZXIiOiIyIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYiLCJraWQiOiJQMXBBZ19WSWNRWTZDb2pIYlFPMk1QcU1tcWlYRng2VnI2R3FWZUNsR2lrIn0.eyJzdWIiOiJqZmFjQDAxaHh0NDFqNGF3NThoMXY4N2U3d2UxNHBuL3VzZXJzL3NodWJoYW1jaGF2QGN5YmFnZS5jb20iLCJzY3AiOiJhcHBsaWVkLXBlcm1pc3Npb25zL2FkbWluIiwiYXVkIjoiKkAqIiwiaXNzIjoiamZmZUAwMWh4dDQxajRhdzU4aDF2ODdlN3dlMTRwbiIsImlhdCI6MTcxNTc1OTExNCwianRpIjoiNzNjMjRkNzgtMzc4ZC00YTdhLThiN2UtZDAxYTcwMTU4Zjc1In0.e2DMbVLertJgGOXmWWuFC_REpbHt6xTE7wGiDSYq_Y0TCMNrvuEiFND42KjqMGIepBGdvVlzzN0fkYkVapQNaHwT97NG1uDWutkhGvr6sLZsrDjhxCJk_H4Gssez2uBjf8Pea7dkAlw1M3qmWuz_7Xkb9s-C0_mUGHC97rEDUPeeGtaQ3-wDgXZUq24Ll6ABH13VYsbuNr7FsOb2J0RBWOsAWxluuADAa80NmiSAs1PQFc_vVbXVKHe_cSHDwcc6ams8bOT9AG8jFTF2gXoT7DW2Rc_21viIk6UNCWWIPEuBIIZLlEbN1MNswrBFfSQI7ovQXGmN-5LYfBf1xMJp9A
